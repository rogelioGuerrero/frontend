{"version":3,"sources":["webpack:///./src/pages/registro/add.vue","webpack:///./src/pages/registro/add.vue?4ebd","webpack:///./src/composables/addpage.js"],"names":["props","pageName","type","default","routeName","apiPath","submitButtonLabel","formValidationError","formValidationMsg","msgAfterSave","showHeader","showSubmitButton","redirect","isSubPage","pageData","setup","app","useApp","formDefaultValues","id_cabecera","dimension","subdimension","componente","item","medicion","base","status","valor","porcentaje","comen","link_evidencias","criterios","orden_dim","orden_subdim","subcriterios","formData","reactive","rules","computed","required","numeric","v$","useVuelidate","page","useAddPage","beforeSubmit","afterSubmit","response","flashMsg","setFormDefaultValues","navigateTo","toRefs","state","saving","submitted","pageReady","methods","submitForm","getErrorClass","getFieldError","isFieldValid","onMounted","pageTitle","setPageTitle","expose","ref","tag","onSubmit","class","modelValue","modelModifiers","trim","label","placeholder","step","rows","icon","loading","__exports__","store","useStore","id","errorMsg","apiUrl","validateForm","value","$validate","$invalid","normalizedFormData","Array","isArray","payload","forEach","obj","Object","keys","key","toString","undefined","url","data","dispatch","closeDialogs","showPageRequestError","storeFormData","getters","assign","field","index","isInvalid","$each","$response","$errors","length","fieldErrors","$silentErrors","$message","watch","current","deep","immediate","computedProps"],"mappings":"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","file":"js/chunk-a4bfd3a2.5be43b56.js","sourcesContent":["<template>\r\n    <div class=\"main-page\">\r\n        <template v-if=\"showHeader\">\r\n            <section class=\"page-section mb-3\" >\r\n                <div class=\"container\">\r\n                    <div class=\"grid justify-content-between\">\r\n                        <div class=\"col \" >\r\n                            <div class=\"\">\r\n                                <div class=\" text-2xl text-primary font-bold\" >\r\n                                    Agregar nuevo\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </template>\r\n        <section class=\"page-section \" >\r\n            <div class=\"container\">\r\n                <div class=\"grid \">\r\n                    <div class=\"md:col-9 sm:col-12 comp-grid\" >\r\n                        <div class=\"\">\r\n                            <div class=\"\">\r\n                                <div >\r\n                                    <form ref=\"observer\" tag=\"form\" @submit.prevent=\"submitForm()\" class=\"\" :class=\"{ 'card': !isSubPage }\">\r\n                                        <div class=\"grid\">\r\n                                            <div class=\"col-12\">\r\n                                                <div class=\"formgrid grid\">\r\n                                                    <div class=\"col-12 md:col-3\">\r\n                                                        Id Cabecera *\r\n                                                    </div>\r\n                                                    <div class=\"col-12 md:col-9\">\r\n                                                        <InputText ref=\"ctrlid_cabecera\" v-model.trim=\"formData.id_cabecera\"  label=\"Id Cabecera\" type=\"number\" placeholder=\"Escribir Id Cabecera\"   step=\"any\"    \r\n                                                        class=\" w-full\" :class=\"getErrorClass('id_cabecera')\">\r\n                                                        </InputText>\r\n                                                        <small v-if=\"isFieldValid('id_cabecera')\" class=\"p-error\">{{ getFieldError('id_cabecera') }}</small> \r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"col-12\">\r\n                                                <div class=\"formgrid grid\">\r\n                                                    <div class=\"col-12 md:col-3\">\r\n                                                        Dimension \r\n                                                    </div>\r\n                                                    <div class=\"col-12 md:col-9\">\r\n                                                        <InputText ref=\"ctrldimension\" v-model.trim=\"formData.dimension\"  label=\"Dimension\" type=\"text\" placeholder=\"Escribir Dimension\"      \r\n                                                        class=\" w-full\" :class=\"getErrorClass('dimension')\">\r\n                                                        </InputText>\r\n                                                        <small v-if=\"isFieldValid('dimension')\" class=\"p-error\">{{ getFieldError('dimension') }}</small> \r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"col-12\">\r\n                                                <div class=\"formgrid grid\">\r\n                                                    <div class=\"col-12 md:col-3\">\r\n                                                        Subdimension \r\n                                                    </div>\r\n                                                    <div class=\"col-12 md:col-9\">\r\n                                                        <InputText ref=\"ctrlsubdimension\" v-model.trim=\"formData.subdimension\"  label=\"Subdimension\" type=\"text\" placeholder=\"Escribir Subdimension\"      \r\n                                                        class=\" w-full\" :class=\"getErrorClass('subdimension')\">\r\n                                                        </InputText>\r\n                                                        <small v-if=\"isFieldValid('subdimension')\" class=\"p-error\">{{ getFieldError('subdimension') }}</small> \r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"col-12\">\r\n                                                <div class=\"formgrid grid\">\r\n                                                    <div class=\"col-12 md:col-3\">\r\n                                                        Componente \r\n                                                    </div>\r\n                                                    <div class=\"col-12 md:col-9\">\r\n                                                        <InputText ref=\"ctrlcomponente\" v-model.trim=\"formData.componente\"  label=\"Componente\" type=\"text\" placeholder=\"Escribir Componente\"      \r\n                                                        class=\" w-full\" :class=\"getErrorClass('componente')\">\r\n                                                        </InputText>\r\n                                                        <small v-if=\"isFieldValid('componente')\" class=\"p-error\">{{ getFieldError('componente') }}</small> \r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"col-12\">\r\n                                                <div class=\"formgrid grid\">\r\n                                                    <div class=\"col-12 md:col-3\">\r\n                                                        Item \r\n                                                    </div>\r\n                                                    <div class=\"col-12 md:col-9\">\r\n                                                        <InputText ref=\"ctrlitem\" v-model.trim=\"formData.item\"  label=\"Item\" type=\"text\" placeholder=\"Escribir Item\"      \r\n                                                        class=\" w-full\" :class=\"getErrorClass('item')\">\r\n                                                        </InputText>\r\n                                                        <small v-if=\"isFieldValid('item')\" class=\"p-error\">{{ getFieldError('item') }}</small> \r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"col-12\">\r\n                                                <div class=\"formgrid grid\">\r\n                                                    <div class=\"col-12 md:col-3\">\r\n                                                        Medicion \r\n                                                    </div>\r\n                                                    <div class=\"col-12 md:col-9\">\r\n                                                        <InputText ref=\"ctrlmedicion\" v-model.trim=\"formData.medicion\"  label=\"Medicion\" type=\"number\" placeholder=\"Escribir Medicion\"   step=\"any\"    \r\n                                                        class=\" w-full\" :class=\"getErrorClass('medicion')\">\r\n                                                        </InputText>\r\n                                                        <small v-if=\"isFieldValid('medicion')\" class=\"p-error\">{{ getFieldError('medicion') }}</small> \r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"col-12\">\r\n                                                <div class=\"formgrid grid\">\r\n                                                    <div class=\"col-12 md:col-3\">\r\n                                                        Base \r\n                                                    </div>\r\n                                                    <div class=\"col-12 md:col-9\">\r\n                                                        <InputText ref=\"ctrlbase\" v-model.trim=\"formData.base\"  label=\"Base\" type=\"number\" placeholder=\"Escribir Base\"   step=\"any\"    \r\n                                                        class=\" w-full\" :class=\"getErrorClass('base')\">\r\n                                                        </InputText>\r\n                                                        <small v-if=\"isFieldValid('base')\" class=\"p-error\">{{ getFieldError('base') }}</small> \r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"col-12\">\r\n                                                <div class=\"formgrid grid\">\r\n                                                    <div class=\"col-12 md:col-3\">\r\n                                                        Status \r\n                                                    </div>\r\n                                                    <div class=\"col-12 md:col-9\">\r\n                                                        <InputText ref=\"ctrlstatus\" v-model.trim=\"formData.status\"  label=\"Status\" type=\"number\" placeholder=\"Escribir Status\"   step=\"any\"    \r\n                                                        class=\" w-full\" :class=\"getErrorClass('status')\">\r\n                                                        </InputText>\r\n                                                        <small v-if=\"isFieldValid('status')\" class=\"p-error\">{{ getFieldError('status') }}</small> \r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"col-12\">\r\n                                                <div class=\"formgrid grid\">\r\n                                                    <div class=\"col-12 md:col-3\">\r\n                                                        Valor \r\n                                                    </div>\r\n                                                    <div class=\"col-12 md:col-9\">\r\n                                                        <InputText ref=\"ctrlvalor\" v-model.trim=\"formData.valor\"  label=\"Valor\" type=\"number\" placeholder=\"Escribir Valor\"   step=\"0.1\"    \r\n                                                        class=\" w-full\" :class=\"getErrorClass('valor')\">\r\n                                                        </InputText>\r\n                                                        <small v-if=\"isFieldValid('valor')\" class=\"p-error\">{{ getFieldError('valor') }}</small> \r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"col-12\">\r\n                                                <div class=\"formgrid grid\">\r\n                                                    <div class=\"col-12 md:col-3\">\r\n                                                        Porcentaje \r\n                                                    </div>\r\n                                                    <div class=\"col-12 md:col-9\">\r\n                                                        <InputText ref=\"ctrlporcentaje\" v-model.trim=\"formData.porcentaje\"  label=\"Porcentaje\" type=\"number\" placeholder=\"Escribir Porcentaje\"   step=\"0.1\"    \r\n                                                        class=\" w-full\" :class=\"getErrorClass('porcentaje')\">\r\n                                                        </InputText>\r\n                                                        <small v-if=\"isFieldValid('porcentaje')\" class=\"p-error\">{{ getFieldError('porcentaje') }}</small> \r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"col-12\">\r\n                                                <div class=\"formgrid grid\">\r\n                                                    <div class=\"col-12 md:col-3\">\r\n                                                        Comen \r\n                                                    </div>\r\n                                                    <div class=\"col-12 md:col-9\">\r\n                                                        <InputText ref=\"ctrlcomen\" v-model.trim=\"formData.comen\"  label=\"Comen\" type=\"text\" placeholder=\"Escribir Comen\"      \r\n                                                        class=\" w-full\" :class=\"getErrorClass('comen')\">\r\n                                                        </InputText>\r\n                                                        <small v-if=\"isFieldValid('comen')\" class=\"p-error\">{{ getFieldError('comen') }}</small> \r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"col-12\">\r\n                                                <div class=\"formgrid grid\">\r\n                                                    <div class=\"col-12 md:col-3\">\r\n                                                        Link Evidencias \r\n                                                    </div>\r\n                                                    <div class=\"col-12 md:col-9\">\r\n                                                        <InputText ref=\"ctrllink_evidencias\" v-model.trim=\"formData.link_evidencias\"  label=\"Link Evidencias\" type=\"text\" placeholder=\"Escribir Link Evidencias\"      \r\n                                                        class=\" w-full\" :class=\"getErrorClass('link_evidencias')\">\r\n                                                        </InputText>\r\n                                                        <small v-if=\"isFieldValid('link_evidencias')\" class=\"p-error\">{{ getFieldError('link_evidencias') }}</small> \r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"col-12\">\r\n                                                <div class=\"formgrid grid\">\r\n                                                    <div class=\"col-12 md:col-3\">\r\n                                                        Criterios \r\n                                                    </div>\r\n                                                    <div class=\"col-12 md:col-9\">\r\n                                                        <InputText ref=\"ctrlcriterios\" v-model.trim=\"formData.criterios\"  label=\"Criterios\" type=\"number\" placeholder=\"Escribir Criterios\"   step=\"any\"    \r\n                                                        class=\" w-full\" :class=\"getErrorClass('criterios')\">\r\n                                                        </InputText>\r\n                                                        <small v-if=\"isFieldValid('criterios')\" class=\"p-error\">{{ getFieldError('criterios') }}</small> \r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"col-12\">\r\n                                                <div class=\"formgrid grid\">\r\n                                                    <div class=\"col-12 md:col-3\">\r\n                                                        Orden Dim \r\n                                                    </div>\r\n                                                    <div class=\"col-12 md:col-9\">\r\n                                                        <InputText ref=\"ctrlorden_dim\" v-model.trim=\"formData.orden_dim\"  label=\"Orden Dim\" type=\"number\" placeholder=\"Escribir Orden Dim\"   step=\"any\"    \r\n                                                        class=\" w-full\" :class=\"getErrorClass('orden_dim')\">\r\n                                                        </InputText>\r\n                                                        <small v-if=\"isFieldValid('orden_dim')\" class=\"p-error\">{{ getFieldError('orden_dim') }}</small> \r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"col-12\">\r\n                                                <div class=\"formgrid grid\">\r\n                                                    <div class=\"col-12 md:col-3\">\r\n                                                        Orden Subdim \r\n                                                    </div>\r\n                                                    <div class=\"col-12 md:col-9\">\r\n                                                        <InputText ref=\"ctrlorden_subdim\" v-model.trim=\"formData.orden_subdim\"  label=\"Orden Subdim\" type=\"number\" placeholder=\"Escribir Orden Subdim\"   step=\"any\"    \r\n                                                        class=\" w-full\" :class=\"getErrorClass('orden_subdim')\">\r\n                                                        </InputText>\r\n                                                        <small v-if=\"isFieldValid('orden_subdim')\" class=\"p-error\">{{ getFieldError('orden_subdim') }}</small> \r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"col-12\">\r\n                                                <div class=\"formgrid grid\">\r\n                                                    <div class=\"col-12 md:col-3\">\r\n                                                        Subcriterios \r\n                                                    </div>\r\n                                                    <div class=\"col-12 md:col-9\">\r\n                                                        <Textarea :class=\"getErrorClass('subcriterios')\" class=\"w-full\" ref=\"ctrlsubcriterios\" rows=\"5\"  v-model=\"formData.subcriterios\" placeholder=\"Escribir Subcriterios\"    type=\"textarea\">\r\n                                                        </Textarea>\r\n                                                        <small v-if=\"isFieldValid('subcriterios')\" class=\"p-error\">{{ getFieldError('subcriterios') }}</small> \r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div v-if=\"showSubmitButton\" class=\"text-center my-3\">\r\n                                            <Button class=\"p-button-primary\" type=\"submit\" label=\"Entregar\" icon=\"pi pi-send\" :loading=\"saving\" />\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    </div>\r\n</template>\r\n<script setup>\r\n\timport {  computed,  reactive, toRefs, onMounted } from 'vue';\r\n\timport useVuelidate from '@vuelidate/core';\r\n\timport { required, numeric, } from '@/services/validators';\r\n\timport { useApp } from '@/composables/app.js';\r\n\timport { useAddPage } from '@/composables/addpage.js';\r\n\tconst props = defineProps({\r\n\t\tpageName : {\r\n\t\t\ttype : String,\r\n\t\t\tdefault : 'registro',\r\n\t\t},\r\n\t\trouteName : {\r\n\t\t\ttype : String,\r\n\t\t\tdefault : 'registroadd',\r\n\t\t},\r\n\t\tapiPath : {\r\n\t\t\ttype : String,\r\n\t\t\tdefault : 'registro/add',\r\n\t\t},\r\n\t\tsubmitButtonLabel: {\r\n\t\t\ttype: String,\r\n\t\t\tdefault: \"Entregar\",\r\n\t\t},\r\n\t\tformValidationError: {\r\n\t\t\ttype: String,\r\n\t\t\tdefault: \"El formulario no es válido\",\r\n\t\t},\r\n\t\tformValidationMsg: {\r\n\t\t\ttype: String,\r\n\t\t\tdefault: \"Por favor complete el formulario\",\r\n\t\t},\r\n\t\tmsgAfterSave: {\r\n\t\t\ttype: String,\r\n\t\t\tdefault: \"Grabar agregado exitosamente\",\r\n\t\t},\r\n\t\tshowHeader: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: true,\r\n\t\t},\r\n\t\tshowSubmitButton: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: true,\r\n\t\t},\r\n\t\tredirect: {\r\n\t\t\ttype : Boolean,\r\n\t\t\tdefault : true,\r\n\t\t},\r\n\t\tisSubPage: {\r\n\t\t\ttype : Boolean,\r\n\t\t\tdefault : false,\r\n\t\t},\r\n\t\tpageData: { // use to set formData default values from another page\r\n\t\t\ttype: Object,\r\n\t\t\tdefault: () => {} \r\n\t\t},\r\n\t});\r\n\tconst app = useApp();\r\n\tconst formDefaultValues = {\r\n\t\tid_cabecera: \"\", \r\n\t\tdimension: \"\", \r\n\t\tsubdimension: \"\", \r\n\t\tcomponente: \"\", \r\n\t\titem: \"\", \r\n\t\tmedicion: \"\", \r\n\t\tbase: \"\", \r\n\t\tstatus: \"\", \r\n\t\tvalor: \"\", \r\n\t\tporcentaje: \"\", \r\n\t\tcomen: \"\", \r\n\t\tlink_evidencias: \"\", \r\n\t\tcriterios: \"\", \r\n\t\torden_dim: \"\", \r\n\t\torden_subdim: \"\", \r\n\t\tsubcriterios: \"\", \r\n\t};\r\n\tconst formData = reactive({ ...formDefaultValues });\r\n\t//form validation rules\r\n\tconst rules = computed(() => {\r\n\t\treturn {\r\n\t\t\tid_cabecera: { required, numeric },\r\n\t\t\tdimension: {  },\r\n\t\t\tsubdimension: {  },\r\n\t\t\tcomponente: {  },\r\n\t\t\titem: {  },\r\n\t\t\tmedicion: { numeric },\r\n\t\t\tbase: { numeric },\r\n\t\t\tstatus: { numeric },\r\n\t\t\tvalor: { numeric },\r\n\t\t\tporcentaje: { numeric },\r\n\t\t\tcomen: {  },\r\n\t\t\tlink_evidencias: {  },\r\n\t\t\tcriterios: { numeric },\r\n\t\t\torden_dim: { numeric },\r\n\t\t\torden_subdim: { numeric },\r\n\t\t\tsubcriterios: {  }\r\n\t\t}\r\n\t});\r\n\tconst v$ = useVuelidate(rules, formData); // form validation\r\n\tconst page = useAddPage({ props, formData, v$, beforeSubmit, afterSubmit });\r\n\t// perform custom validation before submit form\r\n\t// set custom form fields\r\n\t// return false if validation fails\r\n\tfunction beforeSubmit(){\r\n\t\treturn true;\r\n\t}\r\n\t// after form submited to api\r\n\t// reset form data.\r\n\t// redirect to another page\r\n\tfunction afterSubmit(response) {\r\n\t\tapp.flashMsg(props.msgAfterSave);\r\n\t\tpage.setFormDefaultValues(); //reset form data\r\n\t\tif(props.redirect) app.navigateTo(`/registro`);\r\n\t}\r\n\t//page state\r\n\tconst {\r\n\t\tsubmitted, // form submitted state - Boolean\r\n\t\tsaving, // form api submiting state - Boolean\r\n\t\tpageReady, // if api data loaded successfully\r\n\t} = toRefs(page.state);\r\n\t//page methods\r\n\tconst {\r\n\t\tsubmitForm, //submit form data to api\r\n\t\tgetErrorClass, // return error class if field is invalid- args(fieldname)\r\n\t\tgetFieldError, //  get validation error message - args(fieldname)\r\n\t\tisFieldValid, // check if field is validated - args(fieldname)\r\n\t\t // map api datasource  to Select options label-value\r\n\t} = page.methods;\r\n\tonMounted(()=>{\r\n\t\tconst pageTitle = \"Agregar nuevo\";\r\n\t\tapp.setPageTitle(props.routeName, pageTitle); // set browser page title\r\n\t});\r\n\t// expose page object for other components access\r\n\tdefineExpose({\r\n\t\tpage\r\n\t});\r\n</script>\r\n<style scoped>\r\n</style>\r\n","import script from \"./add.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./add.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { reactive, computed, onMounted, watch } from \"vue\";\r\n\r\nimport { useApp } from '@/composables/app';\r\nimport { useStore } from 'vuex';\r\n\r\n\r\nexport function useAddPage({props, formData, v$, beforeSubmit, afterSubmit}) {\r\n\tconst app = useApp();\r\n\tconst store = useStore();\r\n\tconst state = reactive({\r\n\t\tid: null,\r\n\t\tpageReady: false,\r\n\t\tsubmitted: false,\r\n\t\tsaving: false,\r\n\t\terrorMsg: ''\r\n\t});\r\n\r\n\tsetFormDefaultValues();\r\n\r\n\tconst apiUrl = computed(() => {\r\n\t\treturn props.apiPath\r\n\t});\r\n\r\n\tfunction validateForm(){\r\n\t\tstate.submitted = true;\r\n\t\tv$.value.$validate();\r\n\t\tif(v$.value.$invalid){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction normalizedFormData(){\r\n\t\tif(Array.isArray(formData)){ // for multi form data\r\n\t\t\tconst payload = [...formData];\r\n\t\t\tpayload.forEach(function(obj){\r\n\t\t\t\tObject.keys(obj).forEach(function(key){\r\n\t\t\t\t\tif(Array.isArray(obj[key])){\r\n\t\t\t\t\t\tobj[key] = obj[key].toString()\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\treturn payload;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tconst payload = {...formData};\r\n\t\t\tObject.keys(payload).forEach(function(key){\r\n\t\t\t\tif(Array.isArray(payload[key])){\r\n\t\t\t\t\tpayload[key] = payload[key].toString()\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn payload;\r\n\t\t}\r\n\t}\r\n\r\n\tasync function submitForm(){\r\n\t\tstate.submitted = true;\r\n\t\tif(beforeSubmit !== undefined){\r\n\t\t\tif(!beforeSubmit()){ return; }\r\n\t\t}\r\n\r\n\t\tif(!validateForm()){\r\n\t\t\tapp.flashMsg(props.formValidationError, props.formValidationMsg, \"error\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\r\n\t\tstate.saving = true;\r\n\t\tconst url = apiUrl.value;\r\n\t\tconst payload = normalizedFormData();\r\n\t\tlet data = { url, payload }\r\n\t\ttry{\r\n\t\t\tconst response = await store.dispatch(`${props.pageName}/saveRecord`, data);\r\n\t\t\tapp.closeDialogs();// hide dialog if form is submitted via modal\r\n\t\t\tif(afterSubmit){\r\n\t\t\t\tafterSubmit(response)\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch(err) {\r\n\t\t\tapp.showPageRequestError(err);\r\n\t\t}\r\n\t\tfinally{\r\n\t\t\tstate.submitted = false;\r\n\t\t\tstate.saving = false;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setFormDefaultValues(){\r\n\t\tconst storeFormData = computed (()=> store.getters[`${props.pageName}/formData`]); // from data from store\r\n\t\tconst pageData = props.pageData; // when form default values is passed by component props\r\n\t\tconst formDefaultValues = { ...pageData, ...storeFormData.value };\r\n\t\t\r\n\t\tif(!Array.isArray(formData)){\r\n\t\t\tObject.assign(formData, formDefaultValues); //reset form data\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction getErrorClass(field, index){\r\n\t\tlet isInvalid = false;\r\n\t\tif(index === undefined){\r\n\t\t\tisInvalid = v$.value[field].$invalid && state.submitted;\r\n\t\t}\r\n\t\t//for multi form validation\r\n\t\telse if(v$.value.$each.$response.$errors[index][field].length && state.submitted){\r\n\t\t\tisInvalid = true;\r\n\t\t}\r\n\t\treturn {\"p-invalid\": isInvalid };\r\n\t}\r\n\r\n\tfunction isFieldValid(field, index){\r\n\t\tif(index===undefined){\r\n\t\t\treturn v$.value[field].$invalid && state.submitted;\t\r\n\t\t}\r\n\t\telse if(v$.value.$each.$response.$errors[index][field].length && state.submitted){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\r\n\tfunction getFieldError(field, index){\r\n\t\tlet fieldErrors = null;\r\n\t\tif(index===undefined){\r\n\t\t\tfieldErrors = v$.value[field].$silentErrors;\r\n\t\t\tif(fieldErrors.length){\r\n\t\t\t\treturn fieldErrors[0].$message; //return the first error\r\n\t\t\t}\r\n\t\t}\r\n\t\telse{\r\n\t\t\tfieldErrors = v$.value.$each.$response.$errors[index][field];\r\n\t\t\tif(fieldErrors.length){\r\n\t\t\t\treturn fieldErrors[0].$message; //return the first error\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null\r\n\t}\r\n\t\r\n\t\r\n\twatch(() => props.pageData, (current) => {\r\n\t\tObject.assign(formData, current);\r\n\t  },\r\n\t  { deep: true, immediate: true }\r\n  \t);\r\n\r\n\tonMounted(()=>{ \r\n\t\tstate.pageReady = true;\r\n\t});\r\n\r\n\tconst computedProps = {\r\n\t\tapiUrl,\r\n\t}\r\n\r\n\tconst methods = {\r\n\t\tsubmitForm,\r\n\t\tgetErrorClass,\r\n\t\tgetFieldError,\r\n\t\tisFieldValid\r\n\t}\r\n\t\r\n\treturn {\r\n\t\tvalidateForm,\r\n\t\tsetFormDefaultValues,\r\n\t\tformData,\r\n\t\tstate,\r\n\t\tcomputedProps,\r\n\t\tmethods\r\n\t}\r\n\r\n}"],"sourceRoot":""}